Oleg Andreev
Disclaimer: this is entirely experimental description of
            how views should be implemented.
            It may differ from the current implementation.
            

View is a way of structured data retrieval. It is a "map" part of the 
Map-Reduce process.


API OVERVIEW

View is a function which is applied to every document in a whole dataspace
and returns key-value pair(s) for each document.

    LatestComments = View.define(:name => "latest_comments") do |view|
      def view.map(doc)
        if (doc.is_a?(Comment))
          # Key prefix is an association (to be filtered by)
          # Key suffix is an ordering part ("sort by date, please")
          key = [doc["association"], doc.created_at]
      
          # We return single key-value pair
          [ [ key, doc ] ]
         else
          # Return no pairs for all the other docs (nil is okay too).
          [ ]
        end
      end
    end
    
View finder parameters:

:start_key   => JSON
:end_key     => JSON
:limit      => nil (Numeric)
:reverse => false (true)
:offset       => 0
:key        => (equivalent to set start_key and end_key to the same value)
:with_keys  => false (true)  (returns [key, value] pairs instead of just values)

You may ask a view for a set of documents in such a way:

    LatestComments.find(:start_key => [article], :reverse => true, :limit => 20) #=> [...]

You may find a view by name:

    View("latest_comments") == LatestComments # => true

You may define additional methods for a view inside View.new do ... end block:
      
    LatestComments = View.define(:name => "latest_comments") do |view|
      
      # view.map definition skipped (see above) ...
      
      # this is used by has_many when #[] is called
      # *args are passed into doc.associations[*args]
      def has_many(doc, args)
        offset, limit = args  # I'm too lazy to accept Range (for now)
        find(:start_key => [doc], :reverse => true, :limit => limit, :offset => offset)
      end
    end

    Article = Meta.new
      has_many :comments, 
               :view => LatestComments # also "latest_comments" is available

    end

    a = Article.find(...)
    a.comments[0, 10] == LatestComments.has_many(a, [0, 10])

has_many may define some conventions to eliminate need in :view => ... setup.
For instance, for the Article meta and Comment association, view can be named 
"article_comments" (singular + "_" + plural).

If the view is more generic than particular "meta1" + "meta2" pair, 
you may define it explicitely with a :view option.

Key ordering is done respective to the data types.

1) Numbers
2) Strings
3) Arrays
4) Hashes
5) Document

Implementation note:
  Every key is encoded to a string. By default, arbitrary JSON data 
  is supported using prefix encoding:
  
  Number    -> "A<sign><number bitlength (4 bytes)><integer>[.<decimal>]"
  String    -> "B<string>"
  Array     -> "C<element1>\x00<element2>\x00<element3>"
  Hash      -> "D<key1>\x01<value1>\x01<k2>\x01<v2>"
  Document  -> "@<UUID.VERSION>"
  
  Hash keys order is undefined, so you'd better not use hashes here at all :-)
  If user defines view.encode_key, its output is used instead of default 
  JSON encoder. 
  
  4-byte bitlength prefix helps to solve natural order problem
  (when "10" comes before the "2"). Default JSON encoder guarantees that
  numbers are treated differently from strings, and sorted in a natural order.
  
  Default key encoder may be too heavy for some views, so it is highly
  recommended to be familiar with "encode_key" method (see below).
  
  

PERSISTENCE & UPDATES

In theory, every view invocation must involve the whole dataspace processing.
In real world we need to optimize this by building persisted indexes
for quicker data read/update.

If the index does not exist (or it is broken/missing) the whole database 
can be traversed.

To support incremental index updates, StrokeDB must support "update views".
Each database instance contains a simple list of the update views.
Update view is a regular view returning a document-view pairs.
It is used to determine which views should be updated for the particular 
document.

    ArticleRelatedUV = View.define :name => "article_related" do |view|
      def view.map(doc)
        if doc.is_a? Article
          [ doc, View.all.grep{|v| v.name =~ /article/ } ]
        elsif doc.is_a? Comment
          [ doc, View.all.grep{|v| v.name =~ /comment/ } ] 
        end
      end
    end

Key is a document to be processed by a view, value is a view or a list
of views to be updated with respect to this document.

If some document-view pair is duplicated, duplicates are ignored.

Database can define several update views lists. For instance:
1) database.immediate_uvs = [ HasManyStuff ]
2) database.nightly_uvs = [ SomeLazyFulltextIndex ]



VERSIONING

Every document has a number of previous versions which must be 
covered with views as well, as HEAD versions ("latest").

Scenarios:

1) Simple view "article has_many comments" with head versions:
   1. New document: pass through the View, save key-value pairs.
   2. Document update: pass the previous version through the View,
                       wipe out resulting tuples from the index,
                       insert head version as usual.
                       If doc is marked as "deleted", just don't insert it.

2) View for indexing all the documents' versions by date.
   If there're several versions per day, the latest one will be stored. 
      
   docs_by_date = View.define(:name => "docs_by_date") do |view|
     def view.map(doc)
        [ [ doc.created_at.to_date, doc.uuid ], doc ]
     end
   end
   
   # Find this document as it was 2 days ago.
   docs_by_date.find(:key => [2.days.ago, uuid])

   # Find all the updates done 2 days ago
   docs_by_date.find(:key => [2 days ago])
   
   When this index is updated, only particular versions are supplied
   and nothing is removed from the list.
     
To support both scenarios, we may introduce a simple switch 
as a slot in the viewdoc:

   :strategy => :heads | :versions
   
This will tell the view which scenario is to be used.



KEY ARITHMETICS

Scenario 1: "find the latest version of the given document 2+ days old"

SQL: select * from `versions` where `created_at` <= '2.days.ago' order by created_at desc limit 1

StrokeDB view:

docs_by_date = View.define(:name => "docs_by_date") do |view|
  def view.map(doc)
     [ [ doc.uuid, doc.created_at.to_date ], doc ]
  end
end

docs_by_date.find(:key => [doc.uuid, 2.days.ago], :key_search => [:strict, :before] )

:key_search => :strict, :before|:after (nearest), :less, :greater



DATA STRUCTURES

Views are persisted using lists of data ordered by some key.
The list is stored in a skiplist with a variable- or constant-length keys.
By default, variable-length keys are used. 
Value in a skiplist is a pointer to an actual JSON data.

Several optimizations are available for specific needs:

1) You may declare a fixed-length key (with a size in bytes):
  
    View.new(:name => "some_view", :fixed_length_key => 64) do ... end

If the encoded key is shorter or longer, WrongKeyLengthException is thrown.

2) You may define specific key encoder:

    View.new do |view|
      def view.encode_key(key)
        crazy_binary_pack(key)
      end
    end

Note: this is a convenient way to separate key encoding and business logic.
In practice, you may ignore this facility and do encoding stuff in view.map
block and appropriate View#find options.

3) You may want to decode key to use with View#find(:with_keys => true)
Note: encode_key is not required to be a reversible operation, so
decode_key should just return something reasonable for your application.

    View.new do |view|
      def view.decode_key(key)
        crazy_binary_unpack(key)
      end
    end

4) Also, when a large set of data is stored in a distributed environment,
view list can be splitted. To optimize locality (i.e. store related data
in the same storage), you may specify a split hinting:

    View.new do |view|
      def view.split_by(key)
        key[0]
      end
    end

This will act as an advice to split data by the key prefix.
Underlying storage system may either ignore it, or take it in account.
In any case, it is guaranteed, that splitting does not affect view results.



VIEW SERIALIZATION

View is connected with a "view document" (viewdoc). This document is 
build up from the contents of the View.new() options (slots :name, 
:fixed_length_key etc.)
When you change these slots, new version of viewdoc is created.
Persistant index is named after the both viewdoc UUID and viewdoc version.

Say, when you change :fixed_length_key, old index is completely discarded
and new must be built.
Sometimes we need to do a soft migration of the current index,
or keep it as-is, or do a controlled migration to a completely new version.
Migration issues are subject to discuss.




VIEW STORAGE API

View is stored in two kind of storages: skiplists & ArchiveVolumes.

Skiplist is processed in memory and being saved as a whole thing.
ArchiveVolume allows incremental updates without storing much
data in memory.

View update process:

1) Take a document (or something else) as an input,
2) Pass to map method
3) For each key-value pair:
4) Encode key and value
5) Store value in an ArchiveVolume or in a skiplist
6) Store a key-dpointer pair in a skiplist (there might be an actual
   data instead of dpointer in case of inlining)

Note: if value is a document, then dpointer points to document's contents.
In the other case, the value is stored in an ArchiveVolume.

View search process:

1) Encode input keys (start_key, end_key, key) 
2) Load skiplist into memory
3) Walk the skiplist using search rules (see views.rb for info)
4) Select requested dpointers
5) Retrieve data for the given dpointers




FURTHER DISCUSSION

1) Fulltext search indexes.

If you define key in some interesting way (along with finder helpers),
you may build an interesting fulltext search index.

Simple word search index:

    WordSearch = View.define :name => "word_search" do |view|
      def view.map(doc)
        words = doc["body"].split(/\W/)
        words.map do |word|
          [word, doc]
        end
      end
    end 

WordSearch.find(:key => "strokedb") #=> [doc1, doc2, ...]


2) Map-Reduce. 

View is a Map phase of the Map-Reduce algorithm.
Wikipedia describes core components:
* an input reader
* a Map function
* a partition function
* a compare function
* a Reduce function
* an output writer

 (http://en.wikipedia.org/wiki/MapReduce )

Reader and writer are storage-specific.
Partition and comparison functions depend on a particular setup.

Reduce API might look exactly like View API:

    reducer = View.new(...) do |v|
      def v.map(key, values)
        [ [key, values.size] ]
      end
    end



EXAMPLES

1) has_many :comments with optimizations

    View.define(:name => "has_many_comments", 
             :fixed_key_length => (128 + 32)) do |v|
        def v.map(uuid, doc)
          doc.is_a? Comment ? [[[doc.comment_container, doc.created_at], doc]] : nil 
        end
        def v.encode_key(key)
          return key.raw_uuid if key.is_a?(Document) # for prefix search
          key[0].raw_uuid + [key[1].to_i].pack("N")
        end
        def v.split_by(key)
          key[0].raw_uuid_version
        end
    end
    
    # Find first 10 comments for a given post
    Views["has_many_comments"].find(:key => some_post, :limit => 10)

2) has_and_belongs_to_many :tags (inlined tags)

    doc.tags = %w[paris love sun]
    
    View.define(:name => "docs_by_tag") do |v|
      def v.map(doc)
        if doc['tags']
          time = doc.created_at
          doc['tags'].map do |tag|
            [[tag, time], doc]
          end
        end
      end
    end 
    
    # Find latest 20 documents for a given tag
    # Note: "paris" will have another prefix, 
    #       so ["paris", :blah] will not match. Thus we use ["paris"]

    Views["docs_by_tag"].find(:key => ["paris"], :limit => 20, :reverse => true)
    

3) has_many :friends

    Friendship.new(:friends => [oleg, yurik], :status => "collegues")

    View.define(:name => "users_friends") do |v|
      def v.map(doc)
        if doc.is_a? Friendship
          # Filtered by status & ordered by name
          [
            [[doc.friends[0], doc.status, doc.friends[1].name], doc.friends[1]],
            [[doc.friends[1], doc.status, doc.friends[0].name], doc.friends[0]]
          ]
        end
      end
    end

    # Find all Oleg's collegues sorted by name
    Views["users_friends"].find(:key => [oleg, "collegues"])

